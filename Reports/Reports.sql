BEGIN
  DELETE FROM LOGISTIC;
  DELETE FROM NGO_REQUEST;
  DELETE FROM MAIN_FOOD_DATA;
  DELETE FROM FOOD_TABLE;
  DELETE FROM SUPPLIER;
  DELETE FROM USER_DETAILS;
  COMMIT;
END;
/
-- Insert USER_DETAILS (with mandatory fields)
INSERT INTO USER_DETAILS (USER_ID, USER_NAME, PASSWORD, FIRST_NAME, LAST_NAME, ADDRESS, CONTACT_NUMBER, USER_ROLE_ROLE_ID)
VALUES (1, 'HopeNGO', 'pass123', 'Hope', 'Smith', 'Address1', 1234567890, 2);

INSERT INTO USER_DETAILS (USER_ID, USER_NAME, PASSWORD, FIRST_NAME, LAST_NAME, ADDRESS, CONTACT_NUMBER, USER_ROLE_ROLE_ID)
VALUES (2, 'SmileNGO', 'pass456', 'Smile', 'Jones', 'Address2', 2345678901, 2);

INSERT INTO USER_DETAILS (USER_ID, USER_NAME, PASSWORD, FIRST_NAME, LAST_NAME, ADDRESS, CONTACT_NUMBER, USER_ROLE_ROLE_ID)
VALUES (3, 'SupplierUser', 'pass789', 'Supplier', 'Brown', 'Address3', 3456789012, 3);

INSERT INTO USER_DETAILS (USER_ID, USER_NAME, PASSWORD, FIRST_NAME, LAST_NAME, ADDRESS, CONTACT_NUMBER, USER_ROLE_ROLE_ID)
VALUES (4, 'GovUser', 'pass321', 'Gov', 'Taylor', 'Address4', 4567890123, 4);

-- Insert SUPPLIER (matched USER_ID_SUPPLIER from USER_DETAILS)
INSERT INTO SUPPLIER (SUPPLIER_ID, SUPPLIER_NAME, USER_ID_SUPPLIER)
VALUES (1, 'FreshFoods Ltd.', 3);

-- Insert FOOD_TABLE
INSERT INTO FOOD_TABLE (FOOD_ID, FOOD_NAME, UNIT_OF_MEASURE, SUPPLIER_ID, QUALITY, TOTAL_QUANTITY, USER_ID_GOV)
VALUES (1, 'Bread', 'KG', 1, 8, 100, 4);

INSERT INTO FOOD_TABLE (FOOD_ID, FOOD_NAME, UNIT_OF_MEASURE, SUPPLIER_ID, QUALITY, TOTAL_QUANTITY, USER_ID_GOV)
VALUES (2, 'Rice', 'KG', 1, 7, 150, 4);

-- Insert MAIN_FOOD_DATA
INSERT INTO MAIN_FOOD_DATA (MAIN_ID, FOOD_ID, TOTAL_QUANTITY, UNIT_OF_MEASURE, FOOD_STATUS)
VALUES (1, 1, 100, 'KG', 'AVAILABLE');

INSERT INTO MAIN_FOOD_DATA (MAIN_ID, FOOD_ID, TOTAL_QUANTITY, UNIT_OF_MEASURE, FOOD_STATUS)
VALUES (2, 2, 150, 'KG', 'AVAILABLE');

-- Insert NGO_REQUEST
INSERT INTO NGO_REQUEST (NGO_REQUEST_ID, USER_ID_NGO, MAIN_ID, REQ_QUANTITY)
VALUES (101, 1, 1, 40); -- HopeNGO Bread

INSERT INTO NGO_REQUEST (NGO_REQUEST_ID, USER_ID_NGO, MAIN_ID, REQ_QUANTITY)
VALUES (102, 1, 2, 60); -- HopeNGO Rice

INSERT INTO NGO_REQUEST (NGO_REQUEST_ID, USER_ID_NGO, MAIN_ID, REQ_QUANTITY)
VALUES (103, 2, 1, 30); -- SmileNGO Bread

INSERT INTO NGO_REQUEST (NGO_REQUEST_ID, USER_ID_NGO, MAIN_ID, REQ_QUANTITY)
VALUES (104, 2, 2, 80); -- SmileNGO Rice

-- Insert LOGISTIC clearly linked to NGO_REQUEST and USER_ID
INSERT INTO LOGISTIC (LOGISTICS_ID, DRIVER, DELIVERY_STATUS, NGO_REQUEST_ID, USER_ID)
VALUES (201, 'John Doe', 'D', 101, 1); -- Delivered Bread HopeNGO

INSERT INTO LOGISTIC (LOGISTICS_ID, DRIVER, DELIVERY_STATUS, NGO_REQUEST_ID, USER_ID)
VALUES (202, 'Jane Smith', 'D', 102, 1); -- Delivered Rice HopeNGO

INSERT INTO LOGISTIC (LOGISTICS_ID, DRIVER, DELIVERY_STATUS, NGO_REQUEST_ID, USER_ID)
VALUES (203, 'Tom Lee', 'D', 103, 2); -- Delivered Bread SmileNGO

-- Insert food clearly marked as rejected (Quality <5)
INSERT INTO FOOD_TABLE (FOOD_ID, FOOD_NAME, UNIT_OF_MEASURE, SUPPLIER_ID, QUALITY, TOTAL_QUANTITY, USER_ID_GOV)
VALUES (3, 'Expired Bread', 'KG', 1, 3, 50, 4);

INSERT INTO FOOD_TABLE (FOOD_ID, FOOD_NAME, UNIT_OF_MEASURE, SUPPLIER_ID, QUALITY, TOTAL_QUANTITY, USER_ID_GOV)
VALUES (4, 'Spoiled Rice', 'KG', 1, 2, 80, 4);

COMMIT;


COMMIT;

--Clear Reports on Food Wastage Prevented

SELECT
  SUM(m.TOTAL_QUANTITY + NVL(delivered,0)) AS ORIGINAL_QUANTITY,
  SUM(NVL(delivered,0)) AS TOTAL_DELIVERED,
  ROUND(SUM(NVL(delivered,0))/SUM(m.TOTAL_QUANTITY + NVL(delivered,0))*100,2) AS UTILIZATION_PERCENT
FROM MAIN_FOOD_DATA m
LEFT JOIN (
  SELECT MAIN_ID, SUM(REQ_QUANTITY) AS delivered
  FROM NGO_REQUEST nr JOIN LOGISTIC l ON nr.NGO_REQUEST_ID = l.NGO_REQUEST_ID AND l.DELIVERY_STATUS='D'
  GROUP BY MAIN_ID
) d ON m.MAIN_ID = d.MAIN_ID;

--Report 2: Detailed Food-wise Report (Wastage Avoided)
SELECT 
  f.FOOD_NAME,
  m.TOTAL_QUANTITY + NVL(delivered,0) AS ORIGINAL_QUANTITY,
  NVL(delivered,0) AS DELIVERED_QUANTITY,
  ROUND(NVL(delivered,0)/(m.TOTAL_QUANTITY + NVL(delivered,0))*100,2) AS WASTAGE_AVOIDED_PERCENT
FROM MAIN_FOOD_DATA m
JOIN FOOD_TABLE f ON m.FOOD_ID = f.FOOD_ID
LEFT JOIN (
  SELECT MAIN_ID, SUM(REQ_QUANTITY) AS delivered
  FROM NGO_REQUEST nr JOIN LOGISTIC l ON nr.NGO_REQUEST_ID = l.NGO_REQUEST_ID AND l.DELIVERY_STATUS='D'
  GROUP BY MAIN_ID
) d ON m.MAIN_ID = d.MAIN_ID;

SELECT nr.NGO_REQUEST_ID, ud.USER_NAME NGO_NAME, ft.FOOD_NAME, nr.REQ_QUANTITY AS PENDING_QUANTITY
FROM NGO_REQUEST nr
JOIN USER_DETAILS ud ON ud.USER_ID = nr.USER_ID_NGO
JOIN MAIN_FOOD_DATA mf ON mf.MAIN_ID = nr.MAIN_ID
JOIN FOOD_TABLE ft ON mf.FOOD_ID = ft.FOOD_ID
LEFT JOIN LOGISTIC l ON l.NGO_REQUEST_ID = nr.NGO_REQUEST_ID
WHERE l.LOGISTICS_ID IS NULL;


-- Food Rejection Report Based on Government Quality Check
SELECT 
    FOOD_ID,
    FOOD_NAME,
    QUALITY,
    TOTAL_QUANTITY,
    UNIT_OF_MEASURE
FROM FOOD_TABLE
WHERE QUALITY < 5
ORDER BY QUALITY ASC;


-- Aggressively Sold Food Report (Most Requested & Delivered)
SELECT *
FROM (
    SELECT 
        f.FOOD_ID,
        f.FOOD_NAME,
        f.UNIT_OF_MEASURE,
        SUM(nr.REQ_QUANTITY) AS TOTAL_REQUESTED_QUANTITY,
        COUNT(nr.NGO_REQUEST_ID) AS TOTAL_REQUESTS
    FROM FOOD_TABLE f
    JOIN MAIN_FOOD_DATA m ON m.FOOD_ID = f.FOOD_ID
    JOIN NGO_REQUEST nr ON nr.MAIN_ID = m.MAIN_ID
    GROUP BY f.FOOD_ID, f.FOOD_NAME, f.UNIT_OF_MEASURE
    ORDER BY SUM(nr.REQ_QUANTITY) DESC
)
WHERE ROWNUM = 1;

